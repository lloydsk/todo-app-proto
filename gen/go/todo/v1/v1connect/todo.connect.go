// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: todo/v1/todo.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lloydsk/todo-app-proto/gen/go/todo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "todo.v1.AdminService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "todo.v1.UserService"
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "todo.v1.CategoryService"
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "todo.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceListUsersProcedure is the fully-qualified name of the AdminService's ListUsers RPC.
	AdminServiceListUsersProcedure = "/todo.v1.AdminService/ListUsers"
	// AdminServiceGetUserProcedure is the fully-qualified name of the AdminService's GetUser RPC.
	AdminServiceGetUserProcedure = "/todo.v1.AdminService/GetUser"
	// AdminServiceCreateTaskProcedure is the fully-qualified name of the AdminService's CreateTask RPC.
	AdminServiceCreateTaskProcedure = "/todo.v1.AdminService/CreateTask"
	// AdminServiceListTasksProcedure is the fully-qualified name of the AdminService's ListTasks RPC.
	AdminServiceListTasksProcedure = "/todo.v1.AdminService/ListTasks"
	// AdminServiceGetTaskProcedure is the fully-qualified name of the AdminService's GetTask RPC.
	AdminServiceGetTaskProcedure = "/todo.v1.AdminService/GetTask"
	// AdminServiceUpdateTaskProcedure is the fully-qualified name of the AdminService's UpdateTask RPC.
	AdminServiceUpdateTaskProcedure = "/todo.v1.AdminService/UpdateTask"
	// AdminServiceGetTaskHistoryProcedure is the fully-qualified name of the AdminService's
	// GetTaskHistory RPC.
	AdminServiceGetTaskHistoryProcedure = "/todo.v1.AdminService/GetTaskHistory"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/todo.v1.UserService/Login"
	// UserServiceRefreshTokenProcedure is the fully-qualified name of the UserService's RefreshToken
	// RPC.
	UserServiceRefreshTokenProcedure = "/todo.v1.UserService/RefreshToken"
	// UserServiceGetMyTasksProcedure is the fully-qualified name of the UserService's GetMyTasks RPC.
	UserServiceGetMyTasksProcedure = "/todo.v1.UserService/GetMyTasks"
	// UserServiceCompleteTaskProcedure is the fully-qualified name of the UserService's CompleteTask
	// RPC.
	UserServiceCompleteTaskProcedure = "/todo.v1.UserService/CompleteTask"
	// UserServiceMarkTaskUndoableProcedure is the fully-qualified name of the UserService's
	// MarkTaskUndoable RPC.
	UserServiceMarkTaskUndoableProcedure = "/todo.v1.UserService/MarkTaskUndoable"
	// UserServiceUpdateTaskProgressProcedure is the fully-qualified name of the UserService's
	// UpdateTaskProgress RPC.
	UserServiceUpdateTaskProgressProcedure = "/todo.v1.UserService/UpdateTaskProgress"
	// UserServiceSyncTasksProcedure is the fully-qualified name of the UserService's SyncTasks RPC.
	UserServiceSyncTasksProcedure = "/todo.v1.UserService/SyncTasks"
	// UserServiceGetTaskUpdatesProcedure is the fully-qualified name of the UserService's
	// GetTaskUpdates RPC.
	UserServiceGetTaskUpdatesProcedure = "/todo.v1.UserService/GetTaskUpdates"
	// CategoryServiceCreateCategoryProcedure is the fully-qualified name of the CategoryService's
	// CreateCategory RPC.
	CategoryServiceCreateCategoryProcedure = "/todo.v1.CategoryService/CreateCategory"
	// CategoryServiceListCategoriesProcedure is the fully-qualified name of the CategoryService's
	// ListCategories RPC.
	CategoryServiceListCategoriesProcedure = "/todo.v1.CategoryService/ListCategories"
	// CategoryServiceUpdateCategoryProcedure is the fully-qualified name of the CategoryService's
	// UpdateCategory RPC.
	CategoryServiceUpdateCategoryProcedure = "/todo.v1.CategoryService/UpdateCategory"
	// CategoryServiceDeleteCategoryProcedure is the fully-qualified name of the CategoryService's
	// DeleteCategory RPC.
	CategoryServiceDeleteCategoryProcedure = "/todo.v1.CategoryService/DeleteCategory"
	// TagServiceCreateTagProcedure is the fully-qualified name of the TagService's CreateTag RPC.
	TagServiceCreateTagProcedure = "/todo.v1.TagService/CreateTag"
	// TagServiceListTagsProcedure is the fully-qualified name of the TagService's ListTags RPC.
	TagServiceListTagsProcedure = "/todo.v1.TagService/ListTags"
	// TagServiceUpdateTagProcedure is the fully-qualified name of the TagService's UpdateTag RPC.
	TagServiceUpdateTagProcedure = "/todo.v1.TagService/UpdateTag"
	// TagServiceDeleteTagProcedure is the fully-qualified name of the TagService's DeleteTag RPC.
	TagServiceDeleteTagProcedure = "/todo.v1.TagService/DeleteTag"
)

// AdminServiceClient is a client for the todo.v1.AdminService service.
type AdminServiceClient interface {
	// User management
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// Task management
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	// Task history
	GetTaskHistory(context.Context, *connect.Request[v1.GetTaskHistoryRequest]) (*connect.Response[v1.GetTaskHistoryResponse], error)
}

// NewAdminServiceClient constructs a client for the todo.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+AdminServiceListUsersProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+AdminServiceGetUserProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+AdminServiceCreateTaskProcedure,
			connect.WithSchema(adminServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+AdminServiceListTasksProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+AdminServiceGetTaskProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+AdminServiceUpdateTaskProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
		getTaskHistory: connect.NewClient[v1.GetTaskHistoryRequest, v1.GetTaskHistoryResponse](
			httpClient,
			baseURL+AdminServiceGetTaskHistoryProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetTaskHistory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listUsers      *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser        *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	createTask     *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	listTasks      *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	getTask        *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	updateTask     *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	getTaskHistory *connect.Client[v1.GetTaskHistoryRequest, v1.GetTaskHistoryResponse]
}

// ListUsers calls todo.v1.AdminService.ListUsers.
func (c *adminServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls todo.v1.AdminService.GetUser.
func (c *adminServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// CreateTask calls todo.v1.AdminService.CreateTask.
func (c *adminServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// ListTasks calls todo.v1.AdminService.ListTasks.
func (c *adminServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// GetTask calls todo.v1.AdminService.GetTask.
func (c *adminServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// UpdateTask calls todo.v1.AdminService.UpdateTask.
func (c *adminServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// GetTaskHistory calls todo.v1.AdminService.GetTaskHistory.
func (c *adminServiceClient) GetTaskHistory(ctx context.Context, req *connect.Request[v1.GetTaskHistoryRequest]) (*connect.Response[v1.GetTaskHistoryResponse], error) {
	return c.getTaskHistory.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the todo.v1.AdminService service.
type AdminServiceHandler interface {
	// User management
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// Task management
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	// Task history
	GetTaskHistory(context.Context, *connect.Request[v1.GetTaskHistoryRequest]) (*connect.Response[v1.GetTaskHistoryResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("AdminService").Methods()
	adminServiceListUsersHandler := connect.NewUnaryHandler(
		AdminServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(adminServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetUserHandler := connect.NewUnaryHandler(
		AdminServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(adminServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateTaskHandler := connect.NewUnaryHandler(
		AdminServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(adminServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListTasksHandler := connect.NewUnaryHandler(
		AdminServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(adminServiceMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTaskHandler := connect.NewUnaryHandler(
		AdminServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(adminServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateTaskHandler := connect.NewUnaryHandler(
		AdminServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(adminServiceMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetTaskHistoryHandler := connect.NewUnaryHandler(
		AdminServiceGetTaskHistoryProcedure,
		svc.GetTaskHistory,
		connect.WithSchema(adminServiceMethods.ByName("GetTaskHistory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListUsersProcedure:
			adminServiceListUsersHandler.ServeHTTP(w, r)
		case AdminServiceGetUserProcedure:
			adminServiceGetUserHandler.ServeHTTP(w, r)
		case AdminServiceCreateTaskProcedure:
			adminServiceCreateTaskHandler.ServeHTTP(w, r)
		case AdminServiceListTasksProcedure:
			adminServiceListTasksHandler.ServeHTTP(w, r)
		case AdminServiceGetTaskProcedure:
			adminServiceGetTaskHandler.ServeHTTP(w, r)
		case AdminServiceUpdateTaskProcedure:
			adminServiceUpdateTaskHandler.ServeHTTP(w, r)
		case AdminServiceGetTaskHistoryProcedure:
			adminServiceGetTaskHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.ListUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.GetUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.CreateTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.ListTasks is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.GetTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.UpdateTask is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetTaskHistory(context.Context, *connect.Request[v1.GetTaskHistoryRequest]) (*connect.Response[v1.GetTaskHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.AdminService.GetTaskHistory is not implemented"))
}

// UserServiceClient is a client for the todo.v1.UserService service.
type UserServiceClient interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// User tasks
	GetMyTasks(context.Context, *connect.Request[v1.GetMyTasksRequest]) (*connect.Response[v1.GetMyTasksResponse], error)
	CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error)
	MarkTaskUndoable(context.Context, *connect.Request[v1.MarkTaskUndoableRequest]) (*connect.Response[v1.MarkTaskUndoableResponse], error)
	UpdateTaskProgress(context.Context, *connect.Request[v1.UpdateTaskProgressRequest]) (*connect.Response[v1.UpdateTaskProgressResponse], error)
	// Sync operations for offline support
	SyncTasks(context.Context, *connect.Request[v1.SyncTasksRequest]) (*connect.Response[v1.SyncTasksResponse], error)
	GetTaskUpdates(context.Context, *connect.Request[v1.GetTaskUpdatesRequest]) (*connect.Response[v1.GetTaskUpdatesResponse], error)
}

// NewUserServiceClient constructs a client for the todo.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			connect.WithSchema(userServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+UserServiceRefreshTokenProcedure,
			connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		getMyTasks: connect.NewClient[v1.GetMyTasksRequest, v1.GetMyTasksResponse](
			httpClient,
			baseURL+UserServiceGetMyTasksProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetMyTasks")),
			connect.WithClientOptions(opts...),
		),
		completeTask: connect.NewClient[v1.CompleteTaskRequest, v1.CompleteTaskResponse](
			httpClient,
			baseURL+UserServiceCompleteTaskProcedure,
			connect.WithSchema(userServiceMethods.ByName("CompleteTask")),
			connect.WithClientOptions(opts...),
		),
		markTaskUndoable: connect.NewClient[v1.MarkTaskUndoableRequest, v1.MarkTaskUndoableResponse](
			httpClient,
			baseURL+UserServiceMarkTaskUndoableProcedure,
			connect.WithSchema(userServiceMethods.ByName("MarkTaskUndoable")),
			connect.WithClientOptions(opts...),
		),
		updateTaskProgress: connect.NewClient[v1.UpdateTaskProgressRequest, v1.UpdateTaskProgressResponse](
			httpClient,
			baseURL+UserServiceUpdateTaskProgressProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateTaskProgress")),
			connect.WithClientOptions(opts...),
		),
		syncTasks: connect.NewClient[v1.SyncTasksRequest, v1.SyncTasksResponse](
			httpClient,
			baseURL+UserServiceSyncTasksProcedure,
			connect.WithSchema(userServiceMethods.ByName("SyncTasks")),
			connect.WithClientOptions(opts...),
		),
		getTaskUpdates: connect.NewClient[v1.GetTaskUpdatesRequest, v1.GetTaskUpdatesResponse](
			httpClient,
			baseURL+UserServiceGetTaskUpdatesProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetTaskUpdates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	login              *connect.Client[v1.LoginRequest, v1.LoginResponse]
	refreshToken       *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	getMyTasks         *connect.Client[v1.GetMyTasksRequest, v1.GetMyTasksResponse]
	completeTask       *connect.Client[v1.CompleteTaskRequest, v1.CompleteTaskResponse]
	markTaskUndoable   *connect.Client[v1.MarkTaskUndoableRequest, v1.MarkTaskUndoableResponse]
	updateTaskProgress *connect.Client[v1.UpdateTaskProgressRequest, v1.UpdateTaskProgressResponse]
	syncTasks          *connect.Client[v1.SyncTasksRequest, v1.SyncTasksResponse]
	getTaskUpdates     *connect.Client[v1.GetTaskUpdatesRequest, v1.GetTaskUpdatesResponse]
}

// Login calls todo.v1.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls todo.v1.UserService.RefreshToken.
func (c *userServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetMyTasks calls todo.v1.UserService.GetMyTasks.
func (c *userServiceClient) GetMyTasks(ctx context.Context, req *connect.Request[v1.GetMyTasksRequest]) (*connect.Response[v1.GetMyTasksResponse], error) {
	return c.getMyTasks.CallUnary(ctx, req)
}

// CompleteTask calls todo.v1.UserService.CompleteTask.
func (c *userServiceClient) CompleteTask(ctx context.Context, req *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error) {
	return c.completeTask.CallUnary(ctx, req)
}

// MarkTaskUndoable calls todo.v1.UserService.MarkTaskUndoable.
func (c *userServiceClient) MarkTaskUndoable(ctx context.Context, req *connect.Request[v1.MarkTaskUndoableRequest]) (*connect.Response[v1.MarkTaskUndoableResponse], error) {
	return c.markTaskUndoable.CallUnary(ctx, req)
}

// UpdateTaskProgress calls todo.v1.UserService.UpdateTaskProgress.
func (c *userServiceClient) UpdateTaskProgress(ctx context.Context, req *connect.Request[v1.UpdateTaskProgressRequest]) (*connect.Response[v1.UpdateTaskProgressResponse], error) {
	return c.updateTaskProgress.CallUnary(ctx, req)
}

// SyncTasks calls todo.v1.UserService.SyncTasks.
func (c *userServiceClient) SyncTasks(ctx context.Context, req *connect.Request[v1.SyncTasksRequest]) (*connect.Response[v1.SyncTasksResponse], error) {
	return c.syncTasks.CallUnary(ctx, req)
}

// GetTaskUpdates calls todo.v1.UserService.GetTaskUpdates.
func (c *userServiceClient) GetTaskUpdates(ctx context.Context, req *connect.Request[v1.GetTaskUpdatesRequest]) (*connect.Response[v1.GetTaskUpdatesResponse], error) {
	return c.getTaskUpdates.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the todo.v1.UserService service.
type UserServiceHandler interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// User tasks
	GetMyTasks(context.Context, *connect.Request[v1.GetMyTasksRequest]) (*connect.Response[v1.GetMyTasksResponse], error)
	CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error)
	MarkTaskUndoable(context.Context, *connect.Request[v1.MarkTaskUndoableRequest]) (*connect.Response[v1.MarkTaskUndoableResponse], error)
	UpdateTaskProgress(context.Context, *connect.Request[v1.UpdateTaskProgressRequest]) (*connect.Response[v1.UpdateTaskProgressResponse], error)
	// Sync operations for offline support
	SyncTasks(context.Context, *connect.Request[v1.SyncTasksRequest]) (*connect.Response[v1.SyncTasksResponse], error)
	GetTaskUpdates(context.Context, *connect.Request[v1.GetTaskUpdatesRequest]) (*connect.Response[v1.GetTaskUpdatesResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("UserService").Methods()
	userServiceLoginHandler := connect.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(userServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRefreshTokenHandler := connect.NewUnaryHandler(
		UserServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetMyTasksHandler := connect.NewUnaryHandler(
		UserServiceGetMyTasksProcedure,
		svc.GetMyTasks,
		connect.WithSchema(userServiceMethods.ByName("GetMyTasks")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCompleteTaskHandler := connect.NewUnaryHandler(
		UserServiceCompleteTaskProcedure,
		svc.CompleteTask,
		connect.WithSchema(userServiceMethods.ByName("CompleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceMarkTaskUndoableHandler := connect.NewUnaryHandler(
		UserServiceMarkTaskUndoableProcedure,
		svc.MarkTaskUndoable,
		connect.WithSchema(userServiceMethods.ByName("MarkTaskUndoable")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateTaskProgressHandler := connect.NewUnaryHandler(
		UserServiceUpdateTaskProgressProcedure,
		svc.UpdateTaskProgress,
		connect.WithSchema(userServiceMethods.ByName("UpdateTaskProgress")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSyncTasksHandler := connect.NewUnaryHandler(
		UserServiceSyncTasksProcedure,
		svc.SyncTasks,
		connect.WithSchema(userServiceMethods.ByName("SyncTasks")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetTaskUpdatesHandler := connect.NewUnaryHandler(
		UserServiceGetTaskUpdatesProcedure,
		svc.GetTaskUpdates,
		connect.WithSchema(userServiceMethods.ByName("GetTaskUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceLoginProcedure:
			userServiceLoginHandler.ServeHTTP(w, r)
		case UserServiceRefreshTokenProcedure:
			userServiceRefreshTokenHandler.ServeHTTP(w, r)
		case UserServiceGetMyTasksProcedure:
			userServiceGetMyTasksHandler.ServeHTTP(w, r)
		case UserServiceCompleteTaskProcedure:
			userServiceCompleteTaskHandler.ServeHTTP(w, r)
		case UserServiceMarkTaskUndoableProcedure:
			userServiceMarkTaskUndoableHandler.ServeHTTP(w, r)
		case UserServiceUpdateTaskProgressProcedure:
			userServiceUpdateTaskProgressHandler.ServeHTTP(w, r)
		case UserServiceSyncTasksProcedure:
			userServiceSyncTasksHandler.ServeHTTP(w, r)
		case UserServiceGetTaskUpdatesProcedure:
			userServiceGetTaskUpdatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.RefreshToken is not implemented"))
}

func (UnimplementedUserServiceHandler) GetMyTasks(context.Context, *connect.Request[v1.GetMyTasksRequest]) (*connect.Response[v1.GetMyTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.GetMyTasks is not implemented"))
}

func (UnimplementedUserServiceHandler) CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.CompleteTask is not implemented"))
}

func (UnimplementedUserServiceHandler) MarkTaskUndoable(context.Context, *connect.Request[v1.MarkTaskUndoableRequest]) (*connect.Response[v1.MarkTaskUndoableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.MarkTaskUndoable is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateTaskProgress(context.Context, *connect.Request[v1.UpdateTaskProgressRequest]) (*connect.Response[v1.UpdateTaskProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.UpdateTaskProgress is not implemented"))
}

func (UnimplementedUserServiceHandler) SyncTasks(context.Context, *connect.Request[v1.SyncTasksRequest]) (*connect.Response[v1.SyncTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.SyncTasks is not implemented"))
}

func (UnimplementedUserServiceHandler) GetTaskUpdates(context.Context, *connect.Request[v1.GetTaskUpdatesRequest]) (*connect.Response[v1.GetTaskUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.UserService.GetTaskUpdates is not implemented"))
}

// CategoryServiceClient is a client for the todo.v1.CategoryService service.
type CategoryServiceClient interface {
	CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error)
	DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error)
}

// NewCategoryServiceClient constructs a client for the todo.v1.CategoryService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	categoryServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("CategoryService").Methods()
	return &categoryServiceClient{
		createCategory: connect.NewClient[v1.CreateCategoryRequest, v1.CreateCategoryResponse](
			httpClient,
			baseURL+CategoryServiceCreateCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("CreateCategory")),
			connect.WithClientOptions(opts...),
		),
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceListCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
			connect.WithClientOptions(opts...),
		),
		updateCategory: connect.NewClient[v1.UpdateCategoryRequest, v1.UpdateCategoryResponse](
			httpClient,
			baseURL+CategoryServiceUpdateCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("UpdateCategory")),
			connect.WithClientOptions(opts...),
		),
		deleteCategory: connect.NewClient[v1.DeleteCategoryRequest, v1.DeleteCategoryResponse](
			httpClient,
			baseURL+CategoryServiceDeleteCategoryProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("DeleteCategory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	createCategory *connect.Client[v1.CreateCategoryRequest, v1.CreateCategoryResponse]
	listCategories *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	updateCategory *connect.Client[v1.UpdateCategoryRequest, v1.UpdateCategoryResponse]
	deleteCategory *connect.Client[v1.DeleteCategoryRequest, v1.DeleteCategoryResponse]
}

// CreateCategory calls todo.v1.CategoryService.CreateCategory.
func (c *categoryServiceClient) CreateCategory(ctx context.Context, req *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error) {
	return c.createCategory.CallUnary(ctx, req)
}

// ListCategories calls todo.v1.CategoryService.ListCategories.
func (c *categoryServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// UpdateCategory calls todo.v1.CategoryService.UpdateCategory.
func (c *categoryServiceClient) UpdateCategory(ctx context.Context, req *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error) {
	return c.updateCategory.CallUnary(ctx, req)
}

// DeleteCategory calls todo.v1.CategoryService.DeleteCategory.
func (c *categoryServiceClient) DeleteCategory(ctx context.Context, req *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error) {
	return c.deleteCategory.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the todo.v1.CategoryService service.
type CategoryServiceHandler interface {
	CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error)
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error)
	DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("CategoryService").Methods()
	categoryServiceCreateCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceCreateCategoryProcedure,
		svc.CreateCategory,
		connect.WithSchema(categoryServiceMethods.ByName("CreateCategory")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceListCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateCategoryProcedure,
		svc.UpdateCategory,
		connect.WithSchema(categoryServiceMethods.ByName("UpdateCategory")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteCategoryHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteCategoryProcedure,
		svc.DeleteCategory,
		connect.WithSchema(categoryServiceMethods.ByName("DeleteCategory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceCreateCategoryProcedure:
			categoryServiceCreateCategoryHandler.ServeHTTP(w, r)
		case CategoryServiceListCategoriesProcedure:
			categoryServiceListCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateCategoryProcedure:
			categoryServiceUpdateCategoryHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteCategoryProcedure:
			categoryServiceDeleteCategoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) CreateCategory(context.Context, *connect.Request[v1.CreateCategoryRequest]) (*connect.Response[v1.CreateCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.CategoryService.CreateCategory is not implemented"))
}

func (UnimplementedCategoryServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.CategoryService.ListCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) UpdateCategory(context.Context, *connect.Request[v1.UpdateCategoryRequest]) (*connect.Response[v1.UpdateCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.CategoryService.UpdateCategory is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteCategory(context.Context, *connect.Request[v1.DeleteCategoryRequest]) (*connect.Response[v1.DeleteCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.CategoryService.DeleteCategory is not implemented"))
}

// TagServiceClient is a client for the todo.v1.TagService service.
type TagServiceClient interface {
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
}

// NewTagServiceClient constructs a client for the todo.v1.TagService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		createTag: connect.NewClient[v1.CreateTagRequest, v1.CreateTagResponse](
			httpClient,
			baseURL+TagServiceCreateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		listTags: connect.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+TagServiceListTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("ListTags")),
			connect.WithClientOptions(opts...),
		),
		updateTag: connect.NewClient[v1.UpdateTagRequest, v1.UpdateTagResponse](
			httpClient,
			baseURL+TagServiceUpdateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("UpdateTag")),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+TagServiceDeleteTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	createTag *connect.Client[v1.CreateTagRequest, v1.CreateTagResponse]
	listTags  *connect.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	updateTag *connect.Client[v1.UpdateTagRequest, v1.UpdateTagResponse]
	deleteTag *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
}

// CreateTag calls todo.v1.TagService.CreateTag.
func (c *tagServiceClient) CreateTag(ctx context.Context, req *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return c.createTag.CallUnary(ctx, req)
}

// ListTags calls todo.v1.TagService.ListTags.
func (c *tagServiceClient) ListTags(ctx context.Context, req *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// UpdateTag calls todo.v1.TagService.UpdateTag.
func (c *tagServiceClient) UpdateTag(ctx context.Context, req *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return c.updateTag.CallUnary(ctx, req)
}

// DeleteTag calls todo.v1.TagService.DeleteTag.
func (c *tagServiceClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the todo.v1.TagService service.
type TagServiceHandler interface {
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := v1.File_todo_v1_todo_proto.Services().ByName("TagService").Methods()
	tagServiceCreateTagHandler := connect.NewUnaryHandler(
		TagServiceCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceListTagsHandler := connect.NewUnaryHandler(
		TagServiceListTagsProcedure,
		svc.ListTags,
		connect.WithSchema(tagServiceMethods.ByName("ListTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceUpdateTagHandler := connect.NewUnaryHandler(
		TagServiceUpdateTagProcedure,
		svc.UpdateTag,
		connect.WithSchema(tagServiceMethods.ByName("UpdateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceDeleteTagHandler := connect.NewUnaryHandler(
		TagServiceDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceCreateTagProcedure:
			tagServiceCreateTagHandler.ServeHTTP(w, r)
		case TagServiceListTagsProcedure:
			tagServiceListTagsHandler.ServeHTTP(w, r)
		case TagServiceUpdateTagProcedure:
			tagServiceUpdateTagHandler.ServeHTTP(w, r)
		case TagServiceDeleteTagProcedure:
			tagServiceDeleteTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TagService.CreateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TagService.ListTags is not implemented"))
}

func (UnimplementedTagServiceHandler) UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TagService.UpdateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TagService.DeleteTag is not implemented"))
}
