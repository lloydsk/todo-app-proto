name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  validate-and-build:
    name: Validate and Build
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Install Protocol Buffer Compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        protoc --version
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Go protobuf plugins
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install connectrpc.com/connect/cmd/protoc-gen-connect-go@latest
        
    - name: Validate protobuf definitions
      run: ./scripts/validate.sh
      
    - name: Generate all language bindings
      run: ./scripts/generate.sh all
      
    - name: Create go.mod for generated code
      run: |
        cd gen/go
        if [ ! -f go.mod ]; then
          go mod init github.com/todo-app/todo-app-proto/gen/go
          go mod tidy
        fi
      
    - name: Test generated Go code compiles
      run: |
        cd gen/go
        go mod tidy
        go build ./...
        
    - name: Create release archive
      run: |
        # Create archives for different language bindings
        mkdir -p release-artifacts
        
        # Go bindings
        tar -czf release-artifacts/go-bindings-${{ steps.get_version.outputs.version }}.tar.gz gen/go/
        
        # Proto source files
        tar -czf release-artifacts/proto-source-${{ steps.get_version.outputs.version }}.tar.gz proto/
        
        # Full release with everything
        tar -czf release-artifacts/todo-app-proto-${{ steps.get_version.outputs.version }}.tar.gz \
          --exclude='.git' \
          --exclude='release-artifacts' \
          .
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.get_version.outputs.version }}
        path: release-artifacts/
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-and-build
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-${{ needs.validate-and-build.outputs.version }}
        path: release-artifacts/
        
    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          # Get changes since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          # First release
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release of Todo App Protocol Buffers" >> CHANGELOG.md
          echo "- Support for Go language bindings" >> CHANGELOG.md
          echo "- Comprehensive build and validation tooling" >> CHANGELOG.md
        fi
        
        # Set output for GitHub release body
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ needs.validate-and-build.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          release-artifacts/*.tar.gz
        draft: false
        prerelease: ${{ contains(needs.validate-and-build.outputs.version, '-') }}
        
  update-go-module:
    name: Update Go Module Tags
    runs-on: ubuntu-latest
    needs: [validate-and-build, create-release]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Install Protocol Buffer Compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Go protobuf plugins
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install connectrpc.com/connect/cmd/protoc-gen-connect-go@latest
        
    - name: Create release branch and commit generated code
      run: |
        VERSION="${{ needs.validate-and-build.outputs.version }}"
        RELEASE_BRANCH="release/${VERSION}"
        
        # Create and checkout release branch
        git checkout -b "${RELEASE_BRANCH}"
        
        # Generate the Go code
        ./scripts/generate.sh go
        
        # Commit generated code to release branch
        git add gen/go/
        git commit -m "Generate Go protobuf code for ${VERSION}
        
        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Push release branch
        git push origin "${RELEASE_BRANCH}"
        
        # Create the Go module tag pointing to this release branch commit
        git tag "gen/go/${VERSION}"
        git push origin "gen/go/${VERSION}"